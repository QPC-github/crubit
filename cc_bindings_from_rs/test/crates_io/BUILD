"""End-to-end tests of `cc_bindings_from_rs` where the input crates (the ones
fed as input of the bindings generator tool) come from https://crates.io/.

The main verification here is that
1) `cc_bindings_from_rs` can successfully complete bindings generation for
   a broad set of input crates (e.g. without panicking)
2) The generated bindings compile and link successfully into the
   `crates_io_test` binary.

Some opportunistic, secondary, less important verification is also happening
in individual tests in `crates_io_test.cc`.  For example, there is a test
that bindings for `fastrand` can actually be used in practice.
"""

load(
    "//cc_bindings_from_rs/bazel_support:cc_bindings_from_rust_rule.bzl",
    "cc_bindings_from_rust",
)

licenses(["notice"])

TEST_TARGETS = [
    "//third_party/rust/addr2line/v0_14:addr2line",
    "//third_party/rust/adler32/v1:adler32",
    "@crate_index//:adler",
    "@crate_index//:ahash",
    "@crate_index//:ansi_term",
    "@crate_index//:anyhow",
    "@crate_index//:approx",
    "@crate_index//:ar_archive_writer",
    "@crate_index//:arc_swap",
    "@crate_index//:argh",
    "@crate_index//:atomic_refcell",
    "@crate_index//:atomic",
    "@crate_index//:autocxx_parser",
    "@crate_index//:backoff",
    "@crate_index//:backtrace",
    "//third_party/rust/base16ct/v0_1:base16ct",
    "@crate_index//:bencher",
    "@crate_index//:bit_field",
    "//third_party/rust/blake2/v0_10:blake2",
    "@crate_index//:block_buffer",
    "@crate_index//:block_padding",
    "@crate_index//:bstr",
    "@crate_index//:bytemuck",
    "@crate_index//:bytes",
    "//third_party/rust/bzip2_sys/v0_1:bzip2_sys",
    "//third_party/rust/bzip2/v0_4:bzip2",
    "@crate_index//:camino",
    "@crate_index//:cargo_platform",
    "@crate_index//:cargo_toml",
    # TODO: Uncomment and test the crates below - after investigating and fixing
    # the following errors:
    # error: lint `const_err` has been removed: converted into hard error, see
    # issue #71800 <https://github.com/rust-lang/rust/issues/71800>
    # error: use of deprecated associated function
    # `try_lock::TryLock::<T>::try_lock_order`
    #"@crate_index//:cast",
    #"@crate_index//:want",
    "//third_party/rust/cesu8/v1:cesu8",
    "@crate_index//:clap_complete",
    "@crate_index//:clap_lex",
    "@crate_index//:clap",
    "@crate_index//:cobs",
    "@crate_index//:combine",
    "@crate_index//:compiler_builtins",
    "@crate_index//:concrete_npe",
    "@crate_index//:config",
    "@crate_index//:convert_case",
    "@crate_index//:cpp_demangle",
    "@crate_index//:cpufeatures",
    "@crate_index//:critical_section",
    "@crate_index//:crossbeam_deque",
    "@crate_index//:crossbeam_epoch",
    "@crate_index//:crossbeam_utils",
    "@crate_index//:crossterm",
    "@crate_index//:crypto_common",
    "@crate_index//:csv_core",
    "@crate_index//:csv",
    "@crate_index//:cty",
    "@crate_index//:datafrog",
    "@crate_index//:deduplicating_array",
    "@crate_index//:digest",
    "@crate_index//:dirs_next",
    "@crate_index//:dirs_sys_next",
    "@crate_index//:dirs_sys",
    "@crate_index//:dirs",
    "@crate_index//:doc_comment",
    "@crate_index//:downcast_rs",
    "@crate_index//:easy_cast",
    "@crate_index//:egui_glow",
    "@crate_index//:either",
    # TODO: Uncomment and test the crates below - after investigating and fixing
    # the following bug in `cc_bindings_from_rs`:
    # thread 'rustc' panicked at '`Dependency::predecessor` should refer to a
    # NodeId in the `nodes` parameter',
    # cc_bindings_from_rs/toposort.rs:139
    #"@crate_index//:emath",
    #"@crate_index//:nu_ansi_term",
    "@crate_index//:env_logger",
    "@crate_index//:fallible_iterator",
    "@crate_index//:fast_image_resize",
    "@crate_index//:fastrand",
    "@crate_index//:ff",
    "@crate_index//:fixedbitset",
    "@crate_index//:flagset",
    "@crate_index//:fleetspeak",
    "@crate_index//:float_ord",
    "@crate_index//:fluent_langneg",
    "@crate_index//:form_urlencoded",
    # TODO: Uncomment and test the crates below - after investigating and fixing
    # `env!`: error: environment variable `OUT_DIR` not defined
    #"@crate_index//:fst",
    #"@crate_index//:num_bigint",
    #"@crate_index//:typenum",
    #"@crate_index//:unic_char_property",
    #"@crate_index//:unic_char_range",
    #"@crate_index//:unic_common",
    #"@crate_index//:unic_emoji_char",
    #"@crate_index//:unic_ucd_version",
    #"@crate_index//:unicode_linebreak",
    "@crate_index//:funty",
    "@crate_index//:futures_channel",
    "@crate_index//:futures_executor",
    "@crate_index//:futures_util",
    "@crate_index//:getopts",
    "@crate_index//:getrandom",
    "@crate_index//:gimli",
    "@crate_index//:globset",
    "@crate_index//:glow",
    "@crate_index//:group",
    "//third_party/rust/h2/v0_3:h2",
    "@crate_index//:hdrhistogram",
    "@crate_index//:heck",
    "@crate_index//:hex_literal",
    "@crate_index//:hex",
    "@crate_index//:http_body",
    "@crate_index//:httpdate",
    "@crate_index//:http",
    "@crate_index//:iana_time_zone",
    "@crate_index//:idna",
    "@crate_index//:indoc",
    "@crate_index//:intl_pluralrules",
    "@crate_index//:ioctls",
    "@crate_index//:ioctl_sys",
    "@crate_index//:itertools",
    "@crate_index//:itoa",
    "@crate_index//:jni_sys",
    "@crate_index//:jni",
    "@crate_index//:json",
    "@crate_index//:kvm_bindings",
    "@crate_index//:kvm_ioctls",
    "@crate_index//:libc",
    "@crate_index//:libfuzzer_sys",
    "//third_party/rust/libgit2_sys/v0_14:libgit2_sys",
    "@crate_index//:libz_sys",
    "@crate_index//:linked_hash_map",
    "@crate_index//:linux_raw_sys",
    "@crate_index//:log",
    "@crate_index//:managed",
    "@crate_index//:maplit",
    "@crate_index//:matchers",
    "@crate_index//:matrixmultiply",
    "@crate_index//:memchr",
    "@crate_index//:memoffset",
    "@crate_index//:mime",
    "@crate_index//:minimal_lexical",
    "@crate_index//:miniz_oxide",
    "@crate_index//:mio",
    "@crate_index//:multimap",
    "@crate_index//:new_debug_unreachable",
    "@crate_index//:nohash_hasher",
    "@crate_index//:nom",
    "@crate_index//:num_cpus",
    "@crate_index//:num_iter",
    # TODO: Uncomment and test the crate below - after investigating and fixing
    # `doc_comment!(include_str!("../README.md"))` problems:
    # error: couldn't read third_party/rust/numpy/v0_15/src/../README.md:
    # No such file or directory (os error 2)
    #"@crate_index//:numpy",
    "@crate_index//:num_rational",
    "@crate_index//:num_traits",
    "@crate_index//:num",
    "@crate_index//:object",
    "@crate_index//:once_cell",
    "@crate_index//:oorandom",
    "@crate_index//:opaque_debug",
    "@crate_index//:opentelemetry",
    "@crate_index//:os_str_bytes",
    "@crate_index//:overload",
    "@crate_index//:owned_ttf_parser",
    "@crate_index//:parking_lot",
    "@crate_index//:percent_encoding",
    "@crate_index//:perf_event_open_sys",
    "@crate_index//:pest_generator",
    "@crate_index//:pest_meta",
    "@crate_index//:phf_generator",
    "@crate_index//:phf_shared",
    "@crate_index//:pin_project_lite",
    "@crate_index//:pin_project",
    "@crate_index//:pin_utils",
    "@crate_index//:pkg_config",
    "@crate_index//:postcard",
    "@crate_index//:precomputed_hash",
    # TODO: Uncomment and test the crates below - after investigating and fixing
    # memory layout assertion problems in bindings generated by
    # `cc_bindings_from_rs`:
    # assert!(::std::mem::size_of::<::proc_macro2::Punct>() == 8)
    #"@crate_index//:proc-macro2",
    #"@crate_index//:slog",
    "@crate_index//:proc_macro_error",
    "@crate_index//:protobuf_support",
    "@crate_index//:psm",
    "@crate_index//:pulldown_cmark",
    "//third_party/rust/pyo3_macros_backend/v0_15:pyo3_macros_backend",
    # TODO: Uncomment and test the crate below - after investigating and fixing
    # error[E0425]: cannot find function, tuple struct or tuple variant
    # `PyEval_ThreadsInitialized` in module `ffi`
    #"//third_party/rust/pyo3/v0_15:pyo3",
    "@crate_index//:quickcheck",
    "@crate_index//:quick_error",
    "@crate_index//:quote",
    "@crate_index//:radium",
    "@crate_index//:rand_chacha",
    "@crate_index//:rand_core",
    "@crate_index//:rand_pcg",
    "@crate_index//:rand",
    "@crate_index//:rawpointer",
    "@crate_index//:rayon",
    "@crate_index//:regex_automata",
    # TODO: Uncomment and test the crates below - after investigating and fixing
    # error: `std` feature is currently required to build this crate
    # error: expected item, found `"serde_json requires that either `std`
    # (default) or `alloc` feature is enabled"`
    # error: You must enable at least one of the following features:
    # proto-ipv4, proto-ipv6, proto-sixlowpan
    #"@crate_index//:regex",
    #"@crate_index//:serde_json",
    #"@crate_index//:smoltcp",
    "@crate_index//:remove_dir_all",
    "@crate_index//:rls_analysis",
    "@crate_index//:roff",
    "@crate_index//:ron",
    "@crate_index//:rpassword",
    "@crate_index//:rtoolbox",
    "@crate_index//:rustc_demangle",
    "@crate_index//:rustc_hash",
    "@crate_index//:rustix",
    "@crate_index//:ryu",
    "@crate_index//:salsa",
    "@crate_index//:same_file",
    "@crate_index//:self_cell",
    "@crate_index//:semver_parser",
    "@crate_index//:semver",
    "@crate_index//:serde_big_array",
    "@crate_index//:serde_test",
    "@crate_index//:serde",
    "@crate_index//:serde_yaml",
    "//third_party/rust/sha1/v0_10:sha1",
    "//third_party/rust/sha2/v0_9:sha2",
    "@crate_index//:sharded_slab",
    "@crate_index//:signal_hook_mio",
    "@crate_index//:signal_hook_registry",
    "@crate_index//:signal_hook",
    "@crate_index//:signature",
    "@crate_index//:similar",
    "@crate_index//:siphasher",
    "@crate_index//:slab",
    "@crate_index//:slog_atomic",
    "@crate_index//:slog_scope",
    "@crate_index//:slog_stdlog",
    "@crate_index//:smawk",
    "//third_party/rust/socket2/v0_4:socket2",
    "@crate_index//:standback",
    "@crate_index//:static_assertions",
    "@crate_index//:strck_ident",
    "@crate_index//:strck",
    "@crate_index//:string_cache_codegen",
    "@crate_index//:string_cache_shared",
    "@crate_index//:strsim",
    "@crate_index//:strum",
    "@crate_index//:subtle",
    "@crate_index//:sync_unsafe_cell",
    "@crate_index//:syn_mid",
    "@crate_index//:syn",
    "@crate_index//:take_mut",
    "@crate_index//:tap",
    "@crate_index//:tarpc",
    "@crate_index//:tempfile",
    "@crate_index//:textwrap",
    "@crate_index//:thread_local",
    "@crate_index//:tinyjson",
    "@crate_index//:tinyvec_macros",
    "@crate_index//:tinyvec",
    "@crate_index//:tock_registers",
    "@crate_index//:tokio_stream",
    "@crate_index//:tokio_util",
    "@crate_index//:tokio",
    "@crate_index//:tower_service",
    "@crate_index//:tracing_log",
    "@crate_index//:tracing_opentelemetry",
    "@crate_index//:try_lock",
    "@crate_index//:ttf_parser",
    "@crate_index//:twox_hash",
    "@crate_index//:type_map",
    "@crate_index//:unicase",
    "@crate_index//:unic_langid_impl",
    "@crate_index//:unic_langid_macros",
    "@crate_index//:unicode_ident",
    "@crate_index//:unicode_width",
    "//third_party/rust/utf16_iter/v1:utf16_iter",
    "//third_party/rust/utf8_iter/v1:utf8_iter",
    "@crate_index//:vcd",
    "@crate_index//:vec_map",
    "@crate_index//:vhost_user_backend",
    "@crate_index//:vhost",
    "@crate_index//:virtio_bindings",
    "@crate_index//:virtio_queue",
    "@crate_index//:vm_memory",
    "@crate_index//:vmm_sys_util",
    "@crate_index//:wasmparser",
    "//third_party/rust/write16/v1:write16",
    "@crate_index//:wyz",
    "//third_party/rust/x86_64/v0_14:x86_64",
    "@crate_index//:yaml_rust",
    "@crate_index//:zerocopy",
    "@crate_index//:zeroize",
    "@crate_index//:zip",
    "@crate_index//:zstd_safe",
    "@crate_index//:zstd_sys",
]

[cc_bindings_from_rust(
    # "@crate_index//:some_crate",
    name = test_target[test_target.find(":") + 1:] + "_cc_api",
    testonly = 1,
    crate = test_target,
) for test_target in TEST_TARGETS]

cc_test(
    name = "crates_io_test",
    srcs = ["crates_io_test.cc"],
    deps = [
        "@com_google_googletest//:gtest_main",
        "//support/rs_std:rs_char",
        "//common:rust_allocator_shims",
    ] + [
        # "@crate_index//:some_crate",
        ":" + test_target[test_target.find(":") + 1:] + "_cc_api"
        for test_target in TEST_TARGETS
    ],
)
